---
// Enhanced contact form component
import MailIcon from "./icons/Mail.astro";
---

<section id="contact" class="relative py-20 px-4 overflow-hidden">
  <!-- Background Effects -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"></div>
    <div class="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
    <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[600px] h-[600px] bg-gradient-to-r from-cyan-500/5 to-blue-500/5 rounded-full blur-3xl"></div>
  </div>

  <div class="max-w-4xl mx-auto relative z-10">
    <!-- Header Section -->
    <div class="text-center mb-16">
      <div class="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-full border border-blue-500/30 mb-6">
        <span class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></span>
        <span class="text-sm font-medium text-blue-600 dark:text-blue-400">Let's Connect</span>
      </div>
      
      <h2 class="text-4xl md:text-5xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-cyan-600 bg-clip-text text-transparent mb-6">
        Get In Touch
      </h2>
      
      <p class="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto leading-relaxed">
        Ready to bring your ideas to life? Let's discuss your next project and create something amazing together.
      </p>
    </div>

    <div class="grid lg:grid-cols-3 gap-12 items-start">
      <!-- Contact Info Cards -->
      <div class="lg:col-span-1 space-y-6">
        <!-- Email Card -->
        <div class="group bg-white/10 dark:bg-white/5 backdrop-blur-xl rounded-2xl p-6 border border-white/20 dark:border-white/10 hover:bg-white/20 dark:hover:bg-white/10 transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-blue-500/20">
          <div class="flex items-center gap-4 mb-4">
            <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
              <MailIcon class="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 class="font-semibold text-gray-900 dark:text-white">Email</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">Send me a message</p>
            </div>
          </div>
          <a 
            href="mailto:pabloandrestrianam@outlook.com" 
            class="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium transition-colors duration-300 break-all"
          >
            pabloandrestrianam@outlook.com
          </a>
        </div>

        <!-- Availability Card -->
        <div class="bg-white/10 dark:bg-white/5 backdrop-blur-xl rounded-2xl p-6 border border-white/20 dark:border-white/10">
          <div class="flex items-center gap-4 mb-4">
            <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div>
              <h3 class="font-semibold text-gray-900 dark:text-white">Availability</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">Open for new projects</p>
            </div>
          </div>
          <div class="flex items-center gap-2">
            <span class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></span>
            <span class="text-green-600 dark:text-green-400 font-medium">Available now</span>
          </div>
        </div>
      </div>

      <!-- Enhanced Contact Form -->
      <div class="lg:col-span-2">
        <form 
          name="contact" 
          method="POST" 
          data-netlify="true" 
          class="bg-white/10 dark:bg-white/5 backdrop-blur-xl rounded-3xl p-8 border border-white/20 dark:border-white/10 shadow-2xl hover:shadow-3xl transition-all duration-500 group"
        >
          <input type="hidden" name="form-name" value="contact" />
          
          <!-- Form Header -->
          <div class="mb-8">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">Send me a message</h3>
            <p class="text-gray-600 dark:text-gray-400">Fill out the form below and I'll get back to you soon.</p>
          </div>
          
          <div class="space-y-6">
            <!-- Name and Email Row -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div class="space-y-2">
                <label for="name" class="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">
                  <span class="flex items-center gap-2">
                    <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    Full Name *
                  </span>
                </label>
                <div class="relative">
                  <input 
                    type="text" 
                    id="name" 
                    name="name" 
                    required 
                    autocomplete="name"
                    class="w-full px-4 py-4 rounded-xl bg-white/60 dark:bg-gray-800/60 border border-gray-300/50 dark:border-gray-600/50 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 hover:bg-white/80 dark:hover:bg-gray-800/80"
                    placeholder="Your full name"
                  />
                  <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-blue-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                </div>
                <span class="error-message text-red-500 text-sm hidden flex items-center gap-1">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <span class="error-text"></span>
                </span>
              </div>
              
              <div class="space-y-2">
                <label for="email" class="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">
                  <span class="flex items-center gap-2">
                    <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
                    </svg>
                    Email Address *
                  </span>
                </label>
                <div class="relative">
                  <input 
                    type="email" 
                    id="email" 
                    name="email" 
                    required 
                    autocomplete="email"
                    class="w-full px-4 py-4 rounded-xl bg-white/60 dark:bg-gray-800/60 border border-gray-300/50 dark:border-gray-600/50 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 hover:bg-white/80 dark:hover:bg-gray-800/80"
                    placeholder="your@email.com"
                  />
                  <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-blue-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                </div>
                <span class="error-message text-red-500 text-sm hidden flex items-center gap-1">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <span class="error-text"></span>
                </span>
              </div>
            </div>
            
            <!-- Subject -->
            <div class="space-y-2">
              <label for="subject" class="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">
                <span class="flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                  </svg>
                  Subject *
                </span>
              </label>
              <div class="relative">
                <input 
                  type="text" 
                  id="subject" 
                  name="subject" 
                  required 
                  class="w-full px-4 py-4 rounded-xl bg-white/60 dark:bg-gray-800/60 border border-gray-300/50 dark:border-gray-600/50 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 hover:bg-white/80 dark:hover:bg-gray-800/80"
                  placeholder="What's this about?"
                />
                <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-blue-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              </div>
              <span class="error-message text-red-500 text-sm hidden flex items-center gap-1">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span class="error-text"></span>
              </span>
            </div>
            
            <!-- Message -->
            <div class="space-y-2">
              <label for="message" class="block text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">
                <span class="flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                  </svg>
                  Message *
                </span>
              </label>
              <div class="relative">
                <textarea 
                  id="message" 
                  name="message" 
                  rows="6" 
                  required 
                  class="w-full px-4 py-4 rounded-xl bg-white/60 dark:bg-gray-800/60 border border-gray-300/50 dark:border-gray-600/50 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 resize-none text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 hover:bg-white/80 dark:hover:bg-gray-800/80"
                  placeholder="Tell me about your project, ideas, or how I can help you..."
                ></textarea>
                <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-blue-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              </div>
              <span class="error-message text-red-500 text-sm hidden flex items-center gap-1">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span class="error-text"></span>
              </span>
            </div>
            
            <!-- Success/Error messages -->
            <div id="form-messages" class="hidden space-y-4">
              <div id="success-message" class="hidden p-4 bg-gradient-to-r from-green-500/20 to-emerald-500/20 border border-green-500/30 rounded-xl backdrop-blur-sm">
                <div class="flex items-center gap-3">
                  <div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                  </div>
                  <div>
                    <p class="text-green-700 dark:text-green-300 font-semibold">Message sent successfully!</p>
                    <p class="text-green-600 dark:text-green-400 text-sm">I'll get back to you as soon as possible.</p>
                  </div>
                </div>
              </div>
              
              <div id="error-message" class="hidden p-4 bg-gradient-to-r from-red-500/20 to-pink-500/20 border border-red-500/30 rounded-xl backdrop-blur-sm">
                <div class="flex items-center gap-3">
                  <div class="w-8 h-8 bg-red-500 rounded-full flex items-center justify-center">
                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </div>
                  <div>
                    <p class="text-red-700 dark:text-red-300 font-semibold">Something went wrong!</p>
                    <p class="text-red-600 dark:text-red-400 text-sm">Please try again or contact me directly.</p>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Submit Button with SocialPill Style -->
            <button 
              type="submit" 
              id="submit-button"
              class="w-full bg-white/5 border dark:border-white/10 border-gray-400 rounded-full flex justify-center items-center gap-x-2 py-3 px-6 text-base text-black/70 dark:text-white/50 transition hover:scale-110 hover:bg-white/10 font-medium disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
              </svg>
              Send Message
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Additional Contact Options -->
    <div class="mt-16 text-center">
      <div class="inline-flex items-center gap-4 px-6 py-3 bg-white/10 dark:bg-white/5 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-white/10">
        <span class="text-gray-600 dark:text-gray-400">Prefer a different way to connect?</span>
        <a 
          href="mailto:pabloandrestrianam@outlook.com" 
          class="inline-flex items-center gap-2 text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium transition-colors duration-300"
        >
          <MailIcon class="w-4 h-4" />
          Email me directly
        </a>
      </div>
    </div>
  </div>
</section>

<style>
  /* Enhanced form animations */
  .form-field-focus {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15);
  }
  
  /* Success animation */
  @keyframes slideInFromTop {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .success-enter {
    animation: slideInFromTop 0.5s ease-out;
  }
  
  /* Error shake animation */
  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }
  
  .error-shake {
    animation: shake 0.5s ease-in-out;
  }
  
  /* Loading button animation */
  @keyframes pulse-button {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }
  
  .button-loading {
    animation: pulse-button 1s ease-in-out infinite;
  }
  
  /* Floating label effect */
  .floating-label {
    transform: translateY(-1.5rem) scale(0.875);
    color: rgb(59 130 246);
  }
  
  /* Enhanced hover effects */
  .contact-card:hover {
    transform: translateY(-4px) scale(1.02);
  }
  
  /* Responsive improvements */
  @media (max-width: 768px) {
    .contact-form {
      padding: 1.5rem;
    }
    
    .form-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form[name="contact"]') as HTMLFormElement;
    
    if (form) {
      // Enhanced form validation
      const validateField = (field: HTMLInputElement | HTMLTextAreaElement): boolean => {
        const errorSpan = field.parentElement?.querySelector('.error-message') as HTMLElement;
        const errorText = errorSpan?.querySelector('.error-text') as HTMLElement;
        let isValid = true;
        let errorMessage = '';

        // Reset previous error state
        field.classList.remove('border-red-500', 'border-red-400');
        field.classList.add('border-gray-300/50', 'dark:border-gray-600/50');
        if (errorSpan) {
          errorSpan.classList.add('hidden');
          if (errorText) errorText.textContent = '';
        }

        // Validation logic
        if (!field.value.trim()) {
          isValid = false;
          errorMessage = `${field.labels?.[0]?.textContent?.replace('*', '').trim()} is required`;
        }
        else if (field.type === 'email') {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(field.value)) {
            isValid = false;
            errorMessage = 'Please enter a valid email address';
          }
        }
        else if (field.name === 'name' && field.value.trim().length < 2) {
          isValid = false;
          errorMessage = 'Name must be at least 2 characters long';
        }
        else if (field.name === 'subject' && field.value.trim().length < 3) {
          isValid = false;
          errorMessage = 'Subject must be at least 3 characters long';
        }
        else if (field.name === 'message' && field.value.trim().length < 10) {
          isValid = false;
          errorMessage = 'Message must be at least 10 characters long';
        }

        if (!isValid) {
          field.classList.remove('border-gray-300/50', 'dark:border-gray-600/50');
          field.classList.add('border-red-500', 'border-red-400');
          field.classList.add('error-shake');
          
          if (errorSpan && errorText) {
            errorText.textContent = errorMessage;
            errorSpan.classList.remove('hidden');
          }
          
          // Remove shake animation after it completes
          setTimeout(() => {
            field.classList.remove('error-shake');
          }, 500);
        }

        return isValid;
      };

      // Enhanced real-time validation
      const fields = form.querySelectorAll('input[required], textarea[required]') as NodeListOf<HTMLInputElement | HTMLTextAreaElement>;
      
      fields.forEach(field => {
        // Focus effects
        field.addEventListener('focus', () => {
          field.classList.add('form-field-focus');
          field.parentElement?.classList.add('ring-2', 'ring-blue-500/20');
        });
        
        field.addEventListener('blur', () => {
          field.classList.remove('form-field-focus');
          field.parentElement?.classList.remove('ring-2', 'ring-blue-500/20');
          validateField(field);
        });
        
        field.addEventListener('input', () => {
          // Clear error state when user starts typing
          if (field.classList.contains('border-red-500')) {
            field.classList.remove('border-red-500', 'border-red-400');
            field.classList.add('border-gray-300/50', 'dark:border-gray-600/50');
            const errorSpan = field.parentElement?.querySelector('.error-message') as HTMLElement;
            if (errorSpan) {
              errorSpan.classList.add('hidden');
            }
          }
        });
      });

      // Enhanced form submission
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Validate all fields
        let isFormValid = true;
        fields.forEach(field => {
          if (!validateField(field)) {
            isFormValid = false;
          }
        });

        if (!isFormValid) {
          // Scroll to first error with smooth animation
          const firstError = form.querySelector('.border-red-500') as HTMLElement;
          if (firstError) {
            firstError.scrollIntoView({ 
              behavior: 'smooth', 
              block: 'center' 
            });
            setTimeout(() => firstError.focus(), 300);
          }
          return;
        }

        const button = form.querySelector('#submit-button') as HTMLButtonElement;
        const originalContent = button.innerHTML;
        
        // Enhanced loading state with SocialPill style
        button.innerHTML = `
          <svg class="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Sending...
        `;
        button.disabled = true;
        button.classList.add('button-loading');

        // Submit form data
        const formData = new FormData(form);
        
        fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams(formData as any).toString()
        })
        .then(() => {
          // Enhanced success message
          const messagesContainer = document.getElementById('form-messages');
          const successMessage = document.getElementById('success-message');
          if (messagesContainer && successMessage) {
            messagesContainer.classList.remove('hidden');
            successMessage.classList.remove('hidden');
            successMessage.classList.add('success-enter');
          }
          
          // Reset form with animation
          form.reset();
          
          // Auto-hide success message
          setTimeout(() => {
            if (messagesContainer && successMessage) {
              successMessage.classList.add('hidden');
              messagesContainer.classList.add('hidden');
              successMessage.classList.remove('success-enter');
            }
          }, 5000);
        })
        .catch(() => {
          // Enhanced error message
          const messagesContainer = document.getElementById('form-messages');
          const errorMessage = document.getElementById('error-message');
          if (messagesContainer && errorMessage) {
            messagesContainer.classList.remove('hidden');
            errorMessage.classList.remove('hidden');
            errorMessage.classList.add('error-shake');
          }
          
          // Auto-hide error message
          setTimeout(() => {
            if (messagesContainer && errorMessage) {
              errorMessage.classList.add('hidden');
              messagesContainer.classList.add('hidden');
              errorMessage.classList.remove('error-shake');
            }
          }, 5000);
        })
        .finally(() => {
          // Restore button
          button.innerHTML = originalContent;
          button.disabled = false;
          button.classList.remove('button-loading');
        });
      });

      // Add intersection observer for scroll animations
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-fade-in-up');
          }
        });
      }, {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      });

      // Observe form elements
      const formElements = form.querySelectorAll('.space-y-2');
      formElements.forEach(element => {
        observer.observe(element);
      });
    }
  });
</script>